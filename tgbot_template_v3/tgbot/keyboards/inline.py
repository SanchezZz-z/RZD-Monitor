from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


# This is a simple keyboard, that contains 2 buttons
def very_simple_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                 callback_data="create_order"),
            InlineKeyboardButton(text="üìã –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="my_orders"),
        ],
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


# This is the same keyboard, but created with InlineKeyboardBuilder (preferred way)
def simple_menu_keyboard():
    # First, you should create an InlineKeyboardBuilder object
    keyboard = InlineKeyboardBuilder()

    # You can use keyboard.button() method to add buttons, then enter text and callback_data
    keyboard.button(
        text="üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        callback_data="create_order"
    )
    keyboard.button(
        text="üìã –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        # In this simple example, we use a string as callback_data
        callback_data="my_orders"
    )

    # If needed you can use keyboard.adjust() method to change the number of buttons per row
    # keyboard.adjust(2)

    # Then you should always call keyboard.as_markup() method to get a valid InlineKeyboardMarkup object
    return keyboard.as_markup()


# For a more advanced usage of callback_data, you can use the CallbackData factory
class OrderCallbackData(CallbackData, prefix="order"):
    """
    This class represents a CallbackData object for orders.

    - When used in InlineKeyboardMarkup, you have to create an instance of this class, run .pack() method,
    and pass to callback_data parameter.

    - When used in InlineKeyboardBuilder, you have to create an instance of this class and pass to callback_data
    parameter (without .pack() method).

    - In handlers you have to import this class and use it as a filter for callback query handlers, and then unpack
    callback_data parameter to get the data.

    # Example usage in simple_menu.py
    """
    order_id: int


def my_orders_keyboard(orders: list):
    # Here we use a list of orders as a parameter (from simple_menu.py)

    keyboard = InlineKeyboardBuilder()
    for order in orders:
        keyboard.button(
            text=f"üìù {order['title']}",
            # Here we use an instance of OrderCallbackData class as callback_data parameter
            # order id is the field in OrderCallbackData class, that we defined above
            callback_data=OrderCallbackData(order_id=order["id"])
        )

    return keyboard.as_markup()


def right_wrong_inline_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="\U00002705",
        callback_data="correct"
    )
    keyboard.button(
        text="\U0000274C",
        callback_data="wrong"
    )

    return keyboard.as_markup()


class StationOptionCallbackData(CallbackData, prefix="station_option"):
    """
    This class represents a CallbackData object for options.

    - When used in InlineKeyboardMarkup, you have to create an instance of this class, run .pack() method,
    and pass to callback_data parameter.

    - When used in InlineKeyboardBuilder, you have to create an instance of this class and pass to callback_data
    parameter (without .pack() method).

    - In handlers you have to import this class and use it as a filter for callback query handlers, and then unpack
    callback_data parameter to get the data.
    """
    option_num: int


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è / –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
def confirm_station_inline_keyboard(station_options: list):
    station_options_kb = InlineKeyboardBuilder()

    for i in range(1, len(station_options) + 1):
        station_options_kb.button(
            text="{}".format(i),
            callback_data=StationOptionCallbackData(option_num=i)
        )
    station_options_kb.adjust(5)

    retry_kb = InlineKeyboardBuilder()

    retry_kb.button(
        text="–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –µ—â–µ —Ä–∞–∑",
        callback_data=StationOptionCallbackData(option_num=0)
    )

    station_options_kb.attach(retry_kb)

    return station_options_kb.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–µ–∑–¥–æ–≤
def start_menu_inline_keyboard(menu_type: str, msg: str):
    keyboard = InlineKeyboardBuilder()

    # –¢–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–Ω—é
    menu_text = "–ø–æ–µ–∑–¥" if menu_type == "train" else "–º–æ–Ω–∏—Ç–æ—Ä"
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–µ–∑–¥–∞ / –º–æ–Ω–∏—Ç–æ—Ä—ã, —Ç–æ —É –Ω–µ–≥–æ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ (—É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å)
    if msg:
        keyboard.button(
            text="–£–¥–∞–ª–∏—Ç—å {}".format(menu_text),
            callback_data="delete_{}".format(menu_type)
        )
    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥ / –º–æ–Ω–∏—Ç–æ—Ä –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.button(
        text="–î–æ–±–∞–≤–∏—Ç—å {}".format(menu_text),
        callback_data="add_{}".format(menu_type)
    )
    keyboard.button(
        text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    )

    keyboard.adjust(1)

    return keyboard.as_markup()


class UserTrainToDeleteOptionCallbackData(CallbackData, prefix="user_train_to_delete_option"):
    option_num: int


class UserMonitorToDeleteOptionCallbackData(CallbackData, prefix="user_monitor_to_delete_option"):
    option_num: int


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
def few_options_inline_keyboard(menu, options_list_len, selected_options):
    options_kb = InlineKeyboardBuilder()

    # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ callback_data –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–Ω—é
    callback_data_cls = (UserTrainToDeleteOptionCallbackData if menu == "train" else
                         UserMonitorToDeleteOptionCallbackData)

    for i in range(1, options_list_len + 1):
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É —Ä—è–¥–æ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
        button_text = "{} {}".format(i, "\U00002611\U0000FE0F" if i in selected_options else "")
        options_kb.button(text=button_text, callback_data=callback_data_cls(option_num=i))

    options_kb.adjust(2)

    done_or_back_kb = InlineKeyboardBuilder()

    done_or_back_kb.button(text="–ì–æ—Ç–æ–≤–æ", callback_data=callback_data_cls(option_num=0))
    done_or_back_kb.button(text="–ù–∞–∑–∞–¥", callback_data=callback_data_cls(option_num=-1))

    done_or_back_kb.adjust(1)

    options_kb.attach(done_or_back_kb)

    return options_kb.as_markup()


class UserTrainToMonitorOptionCallbackData(CallbackData, prefix="user_train_to_monitor_option"):
    option_num: int


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤
def select_train_to_monitor_inline_keyboard(train_options: list):
    train_options_kb = InlineKeyboardBuilder()

    for i in range(1, len(train_options) + 1):
        train_options_kb.button(
            text="{}".format(i),
            callback_data=UserTrainToMonitorOptionCallbackData(option_num=i)
        )
    train_options_kb.adjust(5)

    back_kb = InlineKeyboardBuilder()

    back_kb.button(
        text="–ù–∞–∑–∞–¥",
        callback_data=UserTrainToMonitorOptionCallbackData(option_num=0)
    )

    train_options_kb.attach(back_kb)

    return train_options_kb.as_markup()


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∞–≥–æ–Ω–∞ (–∫—É–ø–µ, –ø–ª–∞—Ü–∫–∞—Ä—Ç, –°–í, –ª—é–∫—Å)
def select_car_type_inline_keyboard(two_storey: bool, has_premium: bool, selected_options):
    car_type_options_kb = InlineKeyboardBuilder()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    def create_button(kb, text, option):
        check_mark = "\U00002611\U0000FE0F" if option in selected_options else ""
        kb.button(text="{} {}".format(text, check_mark), callback_data=option)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π
    # –í –¥–≤—É—Ö—ç—Ç–∞–∂–Ω—ã—Ö –ø–æ–µ–∑–¥–∞—Ö –Ω–µ –±—ã–≤–∞–µ—Ç –ø–ª–∞—Ü–∫–∞—Ä—Ç–Ω—ã—Ö –≤–∞–≥–æ–Ω–æ–≤
    if two_storey:
        create_button(car_type_options_kb, "–ö—É–ø–µ", "coupe")
        create_button(car_type_options_kb, "–°–í", "lux")
        # –õ—é–∫—Å —Ç–æ–∂–µ –±—ã–≤–∞–µ—Ç –Ω–µ –≤–æ –≤—Å–µ—Ö –ø–æ–µ–∑–¥–∞—Ö
        if has_premium:
            create_button(car_type_options_kb, "–õ—é–∫—Å", "premium")
    else:
        create_button(car_type_options_kb, "–ü–ª–∞—Ü–∫–∞—Ä—Ç", "plaz")
        create_button(car_type_options_kb, "–ö—É–ø–µ", "coupe")
        create_button(car_type_options_kb, "–°–í", "lux")
        if has_premium:
            create_button(car_type_options_kb, "–õ—é–∫—Å", "premium")

    car_type_options_kb.adjust(2)

    disabled_kb = InlineKeyboardBuilder()

    create_button(disabled_kb, "\U0000267F\U0000FE0F", "disabled")

    disabled_kb.adjust(1)

    car_type_options_kb.attach(disabled_kb)

    done_kb = InlineKeyboardBuilder()

    done_kb.button(
        text="–ì–æ—Ç–æ–≤–æ",
        callback_data="done"
    )

    done_kb.adjust(1)

    car_type_options_kb.attach(done_kb)

    return car_type_options_kb.as_markup()


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
def select_gender_inline_keyboard():
    gender_kb = InlineKeyboardBuilder()

    gender_kb.button(
        text="–ú—É–∂—Å–∫–æ–π",
        callback_data="male"
    )
    gender_kb.button(
        text="–ñ–µ–Ω—Å–∫–∏–π",
        callback_data="female"
    )

    gender_kb.adjust(2)

    return gender_kb.as_markup()


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –∂–µ–ª–∞–Ω–∏–∏ –µ—Ö–∞—Ç—å –≤ "–æ–¥–Ω–æ–ø–æ–ª–æ–º" –∫—É–ø–µ
def ask_same_gender_inline_keyboard():
    ask_same_gender_kb = InlineKeyboardBuilder()

    ask_same_gender_kb.button(
        text="–î–∞",
        callback_data="True"
    )
    ask_same_gender_kb.button(
        text="–í—Å–µ —Ä–∞–≤–Ω–æ",
        callback_data="False"
    )

    ask_same_gender_kb.adjust(2)

    return ask_same_gender_kb.as_markup()


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –∂–µ–ª–∞–Ω–∏–∏ –µ—Ö–∞—Ç—å –≤ "–æ–¥–Ω–æ–ø–æ–ª–æ–º" –∫—É–ø–µ
def pets_allowed_inline_keyboard():
    pets_allowed_kb = InlineKeyboardBuilder()

    pets_allowed_kb.button(
        text="–î–∞",
        callback_data="no_pets"
    )
    pets_allowed_kb.button(
        text="–ù–µ—Ç, —è –µ–¥—É —Å –∂–∏–≤–æ—Ç–Ω—ã–º",
        callback_data="pets"
    )
    pets_allowed_kb.button(
        text="–ù–µ—Ç, –º–Ω–µ –≤—Å–µ —Ä–∞–≤–Ω–æ",
        callback_data="whatever"
    )

    pets_allowed_kb.adjust(2)

    return pets_allowed_kb.as_markup()


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç (–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –º–µ—Å—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ —Ç–∏–ø–æ–≤ –≤–∞–≥–æ–Ω–æ–≤)
def seat_types_inline_keyboard(selected_car_types: list, two_storey: bool, selected_options: list):
    seat_types_kb = InlineKeyboardBuilder()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    def create_button(text, option):
        check_mark = "\U00002611\U0000FE0F" if option in selected_options else ""
        seat_types_kb.button(text="{} {}".format(text, check_mark), callback_data=option)

    # –ü—Ä–∏ –ª—é–±–æ–º —Ä–∞—Å–∫–ª–∞–¥–µ –Ω–∞–¥–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∏–∂–Ω–µ–µ –∏ –≤–µ—Ä—Ö–Ω–µ–µ –º–µ—Å—Ç–∞
    create_button("–ù–∏–∂–Ω–µ–µ", "lower")
    create_button("–í–µ—Ä—Ö–Ω–µ–µ", "upper")

    # –ï—Å–ª–∏ –ø–æ–µ–∑–¥ –¥–≤—É—Ö—ç—Ç–∞–∂–Ω—ã–π, —Ç–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω–µ–µ –Ω–∞ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–∂–µ
    if two_storey:
        create_button("–í–µ—Ä—Ö–Ω–µ–µ –Ω–∞ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–∂–µ", "two_storey_upper")

    # –ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–≥–æ–Ω–æ–≤ –µ—Å—Ç—å –ø–ª–∞—Ü–∫–∞—Ä—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–∫–æ–≤—ã–µ –º–µ—Å—Ç–∞
    if "plaz" in selected_car_types:
        create_button("–ù–∏–∂–Ω–µ–µ –±–æ–∫–æ–≤–æ–µ", "side_lower")
        create_button("–í–µ—Ä—Ö–Ω–µ–µ –±–æ–∫–æ–≤–æ–µ", "side_upper")

    seat_types_kb.adjust(1)

    done_kb = InlineKeyboardBuilder()

    done_kb.button(
        text="–ì–æ—Ç–æ–≤–æ",
        callback_data="done"
    )

    done_kb.adjust(1)

    seat_types_kb.attach(done_kb)
    return seat_types_kb.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
class RestoreMonitor(CallbackData, prefix="mon"):
    task_id: int
    train_id: int


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞
def restore_monitor_task_inline_keyboard(task_id, train_id):
    restore_monitor_task_kb = InlineKeyboardBuilder()

    restore_monitor_task_kb.button(
        text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä",
        callback_data=RestoreMonitor(task_id=task_id, train_id=train_id)
    )

    restore_monitor_task_kb.adjust(1)

    return restore_monitor_task_kb.as_markup()


class UserTrainToCheckFreeSeatsOptionCallbackData(CallbackData, prefix="user_train_to_check_option"):
    option_num: int


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
def select_train_to_check_free_seats_inline_keyboard(train_options: list):
    train_options_kb = InlineKeyboardBuilder()

    for i in range(1, len(train_options) + 1):
        train_options_kb.button(
            text="{}".format(i),
            callback_data=UserTrainToCheckFreeSeatsOptionCallbackData(option_num=i)
        )
    train_options_kb.adjust(5)

    back_kb = InlineKeyboardBuilder()

    back_kb.button(
        text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    )

    train_options_kb.attach(back_kb)

    return train_options_kb.as_markup()
